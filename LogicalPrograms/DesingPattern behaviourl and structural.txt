//ref https://www.baeldung.com/java-behavioral-patterns-jdk
Adapter pattern:
----------------

The adapter design pattern is one of the structural design patterns and is used so that two unrelated interfaces can work together. The object that joins these unrelated interfaces is called an adapter.

Bridge pattern:
--------------
With the bridge pattern.you can divide a class or a set of related classes into separate hierachies.i.e.,implementations and abastractions.

Composite pattern:
------------------
using a composite pattern,you can create objects and compose them int the tree structure to work  with them individually.

Decorator pattern:
------------------
Decorator pattern is used to extend the functionality dynamically without the need to change the original class source through inheritance or composition.

Facade Pattern:
--------------
Hides the complexities of the system and provides a simpler interface to the client.
Facade pattern wraps code into a simple.

Flyweight:
---------
with the flyweight pattern.you can improve the performance of the system and reduce memory usage by minimizing the creation of objects.

Proxy pattern:
-------------

The proxy pattern provides a placeholder for another Object to control access to it. This pattern is used when we want to provide controlled access to functionality.

Behavioural design patterns:
---------------------------
Behavioral design patterns are concerned with the interaction and responsibility of objects.

In these design patterns, the interaction between the objects should be in such a way that they can easily talk to each other and still should be loosely coupled.

The behavioural design pattern deals with object interactions with each other and increases flexibility in carrying out communication.

Chain Of Responsibility Pattern:
--------------------------------
A chain of responsibility, sender sends a request to a chain of objects. The request can be handled by any object in the chain.

The Chain of Responsibility pattern allows for objects to implement a common interface and for each implementation to delegate on to the next one if appropriate.
ex:atm

commond pattern:
----------------
https://www.digitalocean.com/community/tutorials/command-design-pattern
This pattern encapsulates a request as an object, allowing the request to be treated as a separate entity and passed around in a system.

Iterator Pattern:
-----------------
According to GoF, Iterator Pattern is used "to access the elements of an aggregate object sequentially without exposing its underlying implementation".

The Iterator pattern is also known as Cursor.

In collection framework, we are now using Iterator that is preferred over Enumeration.

Memento:
--------
The Memento pattern allows us to write objects that are able to change state, and then revert back to their previous state. Essentially an “undo” function for object state.

This can be implemented relatively easily by storing the previous state any time a setter is called:

Observer:
---------
An Observer Pattern says that "just define a one-to-one dependency so that when one object changes state, all its dependents are notified and updated automatically".

Strategy:
---------
This pattern defines a family of algorithms and allows them to be selected and used interchangeably at runtime.

The Strategy pattern allows us to write generic code and then plug specific strategies into it to give us the specific behavior needed for our exact cases.

Template Method:
----------------
A Template Pattern says that "just define the skeleton of a function in an operation, deferring some steps to its subclasses".
It is very common technique for reusing the code.This is only the main benefit of it

It is used when the common behavior among sub-classes should be moved to a single common class by avoiding the duplication.

Mediator pattern:
----------------
Mediator pattern is used to reduce communication complexity between multiple objects or classes. This pattern provides a mediator class which normally handles all the communications between different classes and supports easy maintainability of the code by loose coupling.

Interpreter pattern:
--------------------
Interpreter pattern provides a way to evaluate language grammar or expression.
This pattern is used in SQL parsing, symbol processing engine etc.

visitor Pattern:
---------------
